name: build and publish aws application

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}


on:
  push:
    paths:
      - 'application/**'
      - 'cdk/**/*Service*'
      - 'cdk/pom.xml'
  workflow_dispatch:
jobs:
  build-and-publish:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the network stack
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0

      - name: NPM install
        run: cd cdk && npm install

      - name: Build application jar
        run: |
          cd application
          ./mvnw package

      - name: Create docker image tag
        id: dockerImageTag
        run: echo "::set-output name=tag::$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}"

      - name: Publish docker to ECR registry
        env:
          DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
        run: |
          cd application
          docker build -t aws-test .
          docker tag aws-test ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/aws-test:${DOCKER_IMAGE_TAG}
          docker tag aws-test ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/aws-test:latest

          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/aws-test:${DOCKER_IMAGE_TAG}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/aws-test:latest


      - name: Sending deployment event to queue
        if: github.ref == 'refs/heads/main'
        env:
          DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
        run: |
          export EVENT_PAYLOAD="{\"commitSha\": \"$GITHUB_SHA\", \"ref\": \"main\", \"owner\": \"ErofeevAS\", \"repo\": \"test-aws\", \"workflowId\": \"deploy-application.yml\", \"dockerImageTag\": \"$DOCKER_IMAGE_TAG\"}"
          aws sqs send-message \
            --queue-url=https://sqs.us-west-1.amazonaws.com/234440145524/aws-test-deploymentsQueue.fifo \
            --message-group-id default \
            --message-deduplication-id $GITHUB_SHA \
            --message-body "$EVENT_PAYLOAD"